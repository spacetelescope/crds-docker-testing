# copy contents of this file into .env

##### image tag #####
# choose which image tag to use ("latest" or "slim") or enter custom tag name
## "latest" : built-in test data   in /home/developer/crds_cache
## "slim" : mount your existing test data in cache_volumes
# ## enter a custom tag (e.g. 'dev') if building your own image (or use "latest")

# LATEST: If you don't have the crds test cache data or want to start fresh (sets DOWNLOAD and SYNC = 1)
IMAGE_TAG="latest" # ~4.26 GB

# For SLIM or custom image tag: container will expect test cache to be located inside the mounted "cache_volumes" directory at runtime
# IMAGE_TAG="slim" # ~3.34 GB

# If using custom tag, the vars below MUST be uncommented and set
# IMAGE_TAG="mycustomtag"
# RUN_PARS="-it --privileged -u root"
# CACHE_SRC="cache_volumes"
# DOWNLOAD=0
# SYNC=0

##### API Testing config (optional - not used in test suite) #####
# optionally set MAST token as env var (for API testing/jupyter)
MAST_API_TOKEN=""
CRDS_CONTEXT=""
CRDS_SERVER_URL=""

##### CRDS client code #####
# Modify these to install your branch during image build 
# Leave defaults if mounting into container (installed repo will be overwritten by mounted repo)
GH_USER="spacetelescope"
CRDS_BRANCH="master"
# To mount your local crds client repo into the container (useful for live editing from host IDE):
# > if your local crds repo is in same top level directory as crds-docker-testing: leave CRDS_ROOT value blank
# > if your local crds repo is in some other location, set CRDS_ROOT to the abs local path
# > to Skip mounting (no live editing from host IDE) set to "none"
CRDS_ROOT="" # /abs/path/to/my/crds/client/code

# Configure CRDS for offsite use with a dynamic reference file cache.
CRDS_READONLY_CACHE=0
CRDS_CONFIG_OFFSITE=1

##### test suite data #####
# If not using latest or slim image templates, uncomment and set vars below
# CACHE_SRC="cache_volumes"
# DOWNLOAD=0
# SYNC=0
# RUN_PARS="-it --privileged -u root"