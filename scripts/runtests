#!/bin/bash
source ${HOME}/scripts/hst-crds-config
source ${HOME}/scripts/image-config

# check for mounted test cache, otherwise use tmp_cache 
tmpcache=${HOME}/tmp_cache

# if image was built with test cache (default/"latest") and mounted cache folder is empty,
# untar and use tmp_cache, otherwise use the mounted directory ("cache_volumes") as test root
if [[ ! -d "${CRDS_PATH}" && -d "${tmpcache}.tgz" ]]; then
    tar -xzvf "${tmpcache}.tgz"
    export CRDS_TEST_ROOT=${tmpcache}
else
    export CRDS_TEST_ROOT=${HOME}/${CACHE_SRC}
fi

export CRDS_PATH=${CRDS_TEST_ROOT}/crds-cache-default-test
export CRDS_TESTING_CACHE=${CRDS_TEST_ROOT}/crds-cache-test


if [[ -z $CRDS_SERVER_URL ]]; then
    echo "Setting server url"
    export CRDS_SERVER_URL=https://hst-crds.stsci.edu
    echo "CRDS SERVER URL set to: ${CRDS_SERVER_URL}"
fi


# check crds installation
resp=`crds list --status`
status=`echo $resp | cut -f1 -d'='`

cd ${HOME}/crds

if [[ -z $status ]]; then
    echo "Installing CRDS client code"
    # install mounted crds source code
    ./install && pip install -e .[submission,test,docs,synphot] 
    pip install --upgrade .["submission","test"]
fi

# set CRDS CONTEXT
if [[ -z $CRDS_CONTEXT ]]; then
    export CRDS_CONTEXT=latest
    # summary=`crds list --status` 
    context_num=`echo $resp | cut -f8 -d'=' | cut -f2 -d'_' | cut -f1 -d'.'`
    latest_context="hst_${context_num}.pmap"
    export CRDS_CONTEXT=$latest_context
fi

echo "CRDS_SERVER_URL: ${CRDS_SERVER_URL}"
echo "CRDS_CONTEXT: ${CRDS_CONTEXT}"


./runtests
cd $HOME
